#RBUI.setup do |config|
  
  # Setting a namespace allows you to access RBUI components through this namespace.
  # For example, with namespace set to "UI", you can use:
  #   UI::Button.new instead of RBUI::Button.new
  #   UI::Card.new instead of RBUI::Card.new
  # This can help avoid naming conflicts and allows for cleaner, more concise code.
  # If you prefer to use RBUI components directly, you can leave this unset.
  # config.namespace = "UI"
#end
Rails.application.config.to_prepare do
  # Define the path to the RBUI components
  rbui_components_path = Rails.root.join("app/components/rbui")

  # Check if the RBUI components directory exists
  if Dir.exist?(rbui_components_path)
    # Find all Ruby files in the RBUI components directory and its subdirectories
    Dir[rbui_components_path.join("**", "*.rb")].each do |file|
      # Get the relative path of the file from the RBUI components directory
      relative_path = Pathname.new(file).relative_path_from(rbui_components_path)

      # Convert the file path to a component name
      # e.g., "form/input.rb" becomes ["Form", "Input"]
      component_name_parts = relative_path.to_s.chomp(".rb").split("/").map(&:camelize)

      # Create the full component name with RBUI namespace
      # e.g., "RBUI::Form::Input"
      full_component_name = "RBUI::#{component_name_parts.join("::")}"

      begin
        # Check if the component is already defined
        if defined?(full_component_name.constantize)
          # If it's defined, load (or reload) the file
          load file
        end
      rescue NameError
        # If the constant isn't defined (i.e., the component doesn't exist),
        # we'll skip this file and move to the next one
        next
      end
    end
  end
end

